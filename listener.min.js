const{createServer:a}=require("net"),{request:b}=require("https"),server=a(async function(a){let b=a.remoteAddress.replace("::ffff:","").replace("::1","localhost");await log(`Connection: \x1b[1m${b}${await isUptimeRobot(b)?` \x1b[0m(UptimeRobot)\x1b[0m`:""}`),a.on("error",err),a.end()}).listen(getRequestedPort(),function(){return log(`Port \x1b[1m${server.address().port}\x1b[0m on listen !`),!0});function getRequestedPort(){let a=process.argv.findIndex(a=>a.includes("--port")||a.includes("-p")),b=Number(process.argv[a+1]);return -1===a||Number.isNaN(b)?8875:Math.round(b)}function log(a){console.log(`[${new Date().toLocaleTimeString()}] ${a}`)}function err(a){console.error(`[${new Date().toLocaleTimeString()}] \x1b[31mERR: ${a}`)}async function isUptimeRobot(a){return String(await new Promise((a,c)=>{b({method:"GET",host:"uptimerobot.com",path:"/inc/files/ips/IPv4andIPv6.txt",headers:{"User-Agent":"ValentinKhmerListener/1.0.0"}},b=>{let d=[];b.on("data",function(a){d.push(a)}),b.on("end",()=>{a(Buffer.concat(d).toString("utf-8"))}),b.on("error",function(a){c(a)})}).end()})).split(/\r?\n/).includes(a)}